apply plugin: 'java'
apply plugin: 'eclipse'

def dest = 'QC_robot/dist/debugging'

buildDir = dest

subprojects {
  buildDir = new File(rootDir, 'QC_robot/dist/debugging/modules/')
    apply plugin: 'java'

    dependencies {
      testCompile group: 'junit', name: 'junit', version: '4.+'
    }
  repositories {
    mavenCentral()
  }
}

def version = '1.0'

jar {
  manifest {
    attributes 'Implementation-Title': 'Quality Care Robot',
               'Implementation-Version': version
  }
}

sourceSets {
  main {
    java {
      srcDir 'QC_robot/src/main/java'
    }
    resources {
      srcDir 'QC_robot/src/main/resources'
    }
  }
  tests {
    java {
      srcDir 'QC_robot/src/main/java/modules/instruction'
    }

    output.classesDir '$buildDir/modules/instruction/'
  }    
  instruction {
    java {
      srcDir 'QC_robot/src/main/java/modules/instruction'
    }

    output.classesDir '$buildDir/modules/instruction/'
  }    
  services {
    java {
      srcDir 'QC_robot/src/main/java/modules/services'
    }

    output.classesDir '$buildDir/modules/services/'
  }
  processing {
    java {
      srcDir 'QC_robot/src/main/java/modules/processing'
    }

    output.classesDir '$buildDir/modules/processing/'
  }
  storagge {
    java {
      srcDir 'QC_robot/src/main/java/modules/storage'
    }
    output.classesDir '$buildDir/modules/storage/'
  }
  output {
    java {
      srcDir 'QC_robot/src/main/java/modules/output'
    }
    output.classesDir '$buildDir/modules/output/'
  }
  networking {
    java {
      srcDir 'QC_robot/src/main/java/modules/networking'
    }
    output.classesDir '$buildDir/modules/networking/'
  }
  movement {
    java {
      srcDir 'QC_robot/src/main/java/modules/modules'
    }
    output.classesDir '$buildDir/modules/movement/'
  }
  monitoring {
    java {
      srcDir 'QC_robot/src/main/modules/monitoring'
    }
    output.classesDir '$buildDir/modules/monitoring/'
  }
}

task mainJavadoc(type: Javadoc) {
  source sourceSets.main.allJava
}

task mainTest(type: Test) {
  testClassesDir = sourceSets.main.output.classesDir
    classpath = sourceSets.main.runtimeClasspath
}

repositories {
  mavenCentral()
}



uploadArchives {
  repositories {
    flatDir {
      dirs 'repos'
    }
  }
}
